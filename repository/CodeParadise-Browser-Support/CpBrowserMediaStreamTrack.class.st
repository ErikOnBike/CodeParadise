Class {
	#name : #CpBrowserMediaStreamTrack,
	#superclass : #CpJavaScriptEventTarget,
	#category : #'CodeParadise-Browser-Support-MediaStreams'
}

{ #category : #operations }
CpBrowserMediaStreamTrack >> applyConstraints [

	self applyConstraints: nil
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> applyConstraints: aMediaTrackConstraints [

	"Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the MediaStreamTrack."

	self apply: #applyConstraints withArguments: aMediaTrackConstraints resultAs: CpJavaScriptPromise
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> clone [

	"Returns a duplicate of the MediaStreamTrack."

	^ self apply: #clone
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> contentHint [

	"A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers."

	^ self propertyAt: #contentHint
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> contentHint: aString [

	"A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers."

	self propertyAt: #contentHint put: aString
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> enabled [

	"A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect."

	^ self propertyAt: #enabled
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> enabled: aBoolean [

	"A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect."

	self propertyAt: #enabled put: aBoolean
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> getCapabilities [

	"Returns the a list of constrainable properties available for the MediaStreamTrack."

	^ self apply: #getCapabilities
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> getConstraints [

	"Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints()."

	^ self apply: #getConstraints resultAs: CpBrowserMediaTrackConstraints
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> getSettings [

	"Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties."

	^ self apply: #getSettings
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> id [

	"Returns a string containing a unique identifier (GUID) for the track; it is generated by the browser."

	^ self propertyAt: #id
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> kind [

	"Returns a string set to ""audio"" if the track is an audio track and to ""video"", if it is a video track. It doesn't change if the track is disassociated from its source."

	^ self propertyAt: #kind
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> label [

	"Returns a string containing a user agent-assigned label that identifies the track source, as in ""internal microphone"". The string may be left empty and is empty as long as no source has been connected. When the track is disassociated from its source, the label is not changed."

	^ self propertyAt: #label
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> muted [

	"Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue."

	^ self propertyAt: #muted
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> onEndedDo: aBlock [

	"Sent when playback of the track ends (when the value readyState changes to ended)."

	"Add an event listener for when device change and answer the
	handler (a JavaScript Function). Use the handler 	to remove the
	listener later when no longer needed."

	^ self addEventListener: #ended handler: aBlock
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> onMuteDo: aBlock [

	"Sent to the MediaStreamTrack when the value of the muted property is changed to true, indicating that the track is unable to provide data temporarily (such as when the network is experiencing a service malfunction)."

	"Add an event listener for when device change and answer the
	handler (a JavaScript Function). Use the handler 	to remove the
	listener later when no longer needed."

	^ self addEventListener: #mute handler: aBlock
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> onUnmuteDo: aBlock [

	"Sent to the track when data becomes available again, ending the muted state."

	"Add an event listener for when device change and answer the
	handler (a JavaScript Function). Use the handler 	to remove the
	listener later when no longer needed."

	^ self addEventListener: #unmute handler: aBlock
]

{ #category : #accessing }
CpBrowserMediaStreamTrack >> readyState [

	"Returns an enumerated string giving the status of the track. This will be one of the following values:

	'live'  which indicates that an input is connected and does its best-effort in providing real-time data.
	        In that case, the output of data can be switched on or off using the enabled attribute.
	'ended' which indicates that the input is not giving any more data and will never provide new data."

	^ self propertyAt: #readyState
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> removeEndedHandler: aFunction [

	"Remove an earlier installed event listener
	(using the handler which was answered during installation)"

	self removeEventListener: #ended handler: aFunction
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> removeMuteHandler: aFunction [

	"Remove an earlier installed event listener
	(using the handler which was answered during installation)"

	self removeEventListener: #mute handler: aFunction
]

{ #category : #'event handling' }
CpBrowserMediaStreamTrack >> removeUnmuteHandler: aFunction [

	"Remove an earlier installed event listener
	(using the handler which was answered during installation)"

	self removeEventListener: #unmute handler: aFunction
]

{ #category : #operations }
CpBrowserMediaStreamTrack >> stop [

	"Stops playing the source associated to the track, both the source and the track are disassociated. The track state is set to ended."

	self apply: #stop
]
