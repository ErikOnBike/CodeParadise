"
I am the base class for both browser events and synthetic events.
Synthetic events can not be generated by the browser. Synthetic events
are pure Smalltalk events. For custom events, which CAN be used by the
browser, use CpCustomEvent a subclass of CpEvent.

"
Class {
	#name : #CpBaseEvent,
	#superclass : #Object,
	#category : #'CodeParadise-WebApplication-Events'
}

{ #category : #'conditional events' }
CpBaseEvent class >> & aCondition [

	^ self asConditionalEvent & aCondition
]

{ #category : #'conditional events' }
CpBaseEvent class >> asConditionalEvent [

	^ CpConditionalEvent eventClass: self
]

{ #category : #announcing }
CpBaseEvent class >> asEventClass [

	^ self
]

{ #category : #announcing }
CpBaseEvent class >> handlesAnnouncement: anAnnouncement [

	"The receiver acts as a filter to determine whether subscribers who used the receiver as signaling tag (event identifier class or symbol)
	should receive incoming announcement. In particular, registering to a superclass will receive the announcements from all subclasses.
	See Announcement >> #handlesAnnouncement:"

	^ anAnnouncement class includesBehavior: self
]

{ #category : #'conditional events' }
CpBaseEvent class >> noModifiers [

	"Answer a ConditionalEvent for the receiver disallowing any modifiers.

	This is useful to specify only a click event is allowed, but no modifier should
	be down when clicked."

	^ self & CpNoModifiersDown
]

{ #category : #announcing }
CpBaseEvent >> asAnnouncement [

	^ self
]

{ #category : #accessing }
CpBaseEvent >> currentTarget [

	self subclassResponsibility
]

{ #category : #dispatching }
CpBaseEvent >> dispatch [

	"Dispatch the receiver by announcing it through its element"

	(self currentTarget ifNil: [ ^ self ])
		announce: self
]

{ #category : #testing }
CpBaseEvent >> isAltKeyDown [

	^ self modifiers allMask: CpAltKeyDown modifiers
]

{ #category : #testing }
CpBaseEvent >> isAnyModifierDown [

	^ self modifiers ~= 0
]

{ #category : #testing }
CpBaseEvent >> isCtrlKeyDown [

	^ self modifiers allMask: CpCtrlKeyDown modifiers
]

{ #category : #testing }
CpBaseEvent >> isMetaKeyDown [

	^ self modifiers allMask: CpMetaKeyDown modifiers
]

{ #category : #testing }
CpBaseEvent >> isNoModifierDown [

	^ self modifiers = 0
]

{ #category : #testing }
CpBaseEvent >> isShiftKeyDown [

	^ self modifiers allMask: CpShiftKeyDown modifiers
]

{ #category : #testing }
CpBaseEvent >> matchesKeyDownCondition: aKeyDownCondition [

	"Answer whether the specified key down condition matches (modifiers are equal)"

	^ aKeyDownCondition matches: self
]

{ #category : #accessing }
CpBaseEvent >> modifiers [

	"Answer an Integer specifying the different modifiers pressed.
	Combine the following individual numbers:
		1 - alt
		2 - ctrl
		4 - meta
		8 - shift

	Implementation: The browser Key, Mouse, Touch and Gesture events support this as well as some
	Synthetic events, all others will answer 0."

	^ 0
]

{ #category : #announcing }
CpBaseEvent >> prepareForDelivery [

	"This method will be executed once before subscriptions delivery.
	If nobody subscribed on me this method will not be called.
	It allows to put some heavy initialization logic here. It will be executed only 
	if there is interest on me
	See Announcement >> #prepareForDelivery"
]
