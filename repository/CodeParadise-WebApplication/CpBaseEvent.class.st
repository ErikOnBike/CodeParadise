"
I am the base class for both browser events and synthetic events.
Synthetic events can not be generated by the browser. Synthetic events
are pure Smalltalk events. For custom events, which CAN be used by the
browser, use CpCustomEvent a subclass of CpEvent.

"
Class {
	#name : #CpBaseEvent,
	#superclass : #Object,
	#category : #'CodeParadise-WebApplication-Events'
}

{ #category : #'conditional events' }
CpBaseEvent class >> & aCondition [

	^ self asConditionalEvent & aCondition
]

{ #category : #'conditional events' }
CpBaseEvent class >> asConditionalEvent [

	^ CpConditionalEvent eventClass: self
]

{ #category : #announcing }
CpBaseEvent class >> asEventClass [

	^ self
]

{ #category : #announcing }
CpBaseEvent class >> handlesAnnouncement: anAnnouncement [

	"The receiver acts as a filter to determine whether subscribers who used the receiver as signaling tag (event identifier class or symbol)
	should receive incoming announcement. In particular, registering to a superclass will receive the announcements from all subclasses.
	See Announcement >> #handlesAnnouncement:"

	^ anAnnouncement class includesBehavior: self
]

{ #category : #announcing }
CpBaseEvent >> asAnnouncement [

	^ self
]

{ #category : #accessing }
CpBaseEvent >> currentTarget [

	self subclassResponsibility
]

{ #category : #dispatching }
CpBaseEvent >> dispatch [

	"Dispatch the receiver by announcing it through its element"

	(self currentTarget ifNil: [ ^ self ])
		announce: self
]

{ #category : #announcing }
CpBaseEvent >> prepareForDelivery [

	"This method will be executed once before subscriptions delivery.
	If nobody subscribed on me this method will not be called.
	It allows to put some heavy initialization logic here. It will be executed only 
	if there is interest on me
	See Announcement >> #prepareForDelivery"
]
