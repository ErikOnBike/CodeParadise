Class {
	#name : #IonCol,
	#superclass : #IonElement,
	#category : #'CodeParadise-WebApplication-Ionic-Elements'
}

{ #category : #api }
IonCol >> offset [

	"The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offset
]

{ #category : #api }
IonCol >> offset: aString [

	"The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offset put: aString
]

{ #category : #api }
IonCol >> offsetLg [

	"The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offsetLg
]

{ #category : #api }
IonCol >> offsetLg: aString [

	"The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offsetLg put: aString
]

{ #category : #api }
IonCol >> offsetMd [

	"The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offsetMd
]

{ #category : #api }
IonCol >> offsetMd: aString [

	"The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offsetMd put: aString
]

{ #category : #api }
IonCol >> offsetSm [

	"The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offsetSm
]

{ #category : #api }
IonCol >> offsetSm: aString [

	"The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offsetSm put: aString
]

{ #category : #api }
IonCol >> offsetXl [

	"The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offsetXl
]

{ #category : #api }
IonCol >> offsetXl: aString [

	"The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offsetXl put: aString
]

{ #category : #api }
IonCol >> offsetXs [

	"The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #offsetXs
]

{ #category : #api }
IonCol >> offsetXs: aString [

	"The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #offsetXs put: aString
]

{ #category : #api }
IonCol >> pull [

	"The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pull
]

{ #category : #api }
IonCol >> pull: aString [

	"The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pull put: aString
]

{ #category : #api }
IonCol >> pullLg [

	"The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pullLg
]

{ #category : #api }
IonCol >> pullLg: aString [

	"The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pullLg put: aString
]

{ #category : #api }
IonCol >> pullMd [

	"The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pullMd
]

{ #category : #api }
IonCol >> pullMd: aString [

	"The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pullMd put: aString
]

{ #category : #api }
IonCol >> pullSm [

	"The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pullSm
]

{ #category : #api }
IonCol >> pullSm: aString [

	"The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pullSm put: aString
]

{ #category : #api }
IonCol >> pullXl [

	"The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pullXl
]

{ #category : #api }
IonCol >> pullXl: aString [

	"The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pullXl put: aString
]

{ #category : #api }
IonCol >> pullXs [

	"The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	^ self propertyAt: #pullXs
]

{ #category : #api }
IonCol >> pullXs: aString [

	"The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
	
	Type: string"

	self propertyAt: #pullXs put: aString
]

{ #category : #api }
IonCol >> push [

	"The amount to push the column, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #push
]

{ #category : #api }
IonCol >> push: aString [

	"The amount to push the column, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #push put: aString
]

{ #category : #api }
IonCol >> pushLg [

	"The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #pushLg
]

{ #category : #api }
IonCol >> pushLg: aString [

	"The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #pushLg put: aString
]

{ #category : #api }
IonCol >> pushMd [

	"The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #pushMd
]

{ #category : #api }
IonCol >> pushMd: aString [

	"The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #pushMd put: aString
]

{ #category : #api }
IonCol >> pushSm [

	"The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #pushSm
]

{ #category : #api }
IonCol >> pushSm: aString [

	"The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #pushSm put: aString
]

{ #category : #api }
IonCol >> pushXl [

	"The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #pushXl
]

{ #category : #api }
IonCol >> pushXl: aString [

	"The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #pushXl put: aString
]

{ #category : #api }
IonCol >> pushXs [

	"The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	^ self propertyAt: #pushXs
]

{ #category : #api }
IonCol >> pushXs: aString [

	"The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
	
	Type: string"

	self propertyAt: #pushXs put: aString
]

{ #category : #api }
IonCol >> size [

	"The size of the column, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #size
]

{ #category : #api }
IonCol >> size: aString [

	"The size of the column, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #size put: aString
]

{ #category : #api }
IonCol >> sizeLg [

	"The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #sizeLg
]

{ #category : #api }
IonCol >> sizeLg: aString [

	"The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #sizeLg put: aString
]

{ #category : #api }
IonCol >> sizeMd [

	"The size of the column for md screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #sizeMd
]

{ #category : #api }
IonCol >> sizeMd: aString [

	"The size of the column for md screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #sizeMd put: aString
]

{ #category : #api }
IonCol >> sizeSm [

	"The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #sizeSm
]

{ #category : #api }
IonCol >> sizeSm: aString [

	"The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #sizeSm put: aString
]

{ #category : #api }
IonCol >> sizeXl [

	"The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #sizeXl
]

{ #category : #api }
IonCol >> sizeXl: aString [

	"The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #sizeXl put: aString
]

{ #category : #api }
IonCol >> sizeXs [

	"The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	^ self propertyAt: #sizeXs
]

{ #category : #api }
IonCol >> sizeXs: aString [

	"The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If ''auto'' is passed, the column will be the size of its content.
	
	Type: string"

	self propertyAt: #sizeXs put: aString
]
